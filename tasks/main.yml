---
- name: Check desired cluster status
  ansible.builtin.assert:
    that: kind_cluster_state in kind_valid_states
    fail_msg: "kind_cluster_state must be one of [{{ kind_valid_states | join(', ') }}]"
  vars:
    kind_valid_states:
      - present
      - absent

- name: Check cluster network format
  ansible.builtin.assert:
    that: kind_network_addr | ansible.utils.ipaddr('network/prefix')
    fail_msg: "kind_network_addr must be in network/prefix format"

- name: Create tempdir
  ansible.builtin.tempfile:
    state: directory
    prefix: kind
  register: kind_tmpdir
  changed_when: false

- name: Set default Kind binary path
  ansible.builtin.set_fact:
    _kind_bin: "{{ kind_bin | default(_kind_bin_default) }}"
  vars:
    _kind_bin_default: "{{ kind_tmpdir.path }}/kind"

- name: Manage Kind cluster
  block:
    - name: Check local Kind binary
      ansible.builtin.stat:
        path: "{{ _kind_bin }}"
      register: kind_bin_stat

    - name: Download Kind binary
      when: not kind_bin_stat.stat.exists
      block:
        - name: Set target Kind release
          ansible.builtin.set_fact:
            _kind_release_tag: "{{ (kind_release_tag in ['latest', '']) | ternary(_latest, kind_release_tag) }}"
          vars:
            _uri: "https://api.github.com/repos/kubernetes-sigs/kind/releases/latest"
            _gh_token: "{{ lookup('ansible.builtin.env', 'GH_TOKEN') }}"
            _github_token: "{{ lookup('ansible.builtin.env', 'GITHUB_TOKEN', default=_gh_token) }}"
            _headers: "{{ {} if not _github_token else { 'Authorization': 'token ' + _github_token } }}"
            _query: "{{ lookup('ansible.builtin.url', _uri, split_lines=False, headers=_headers) | from_json }}"
            _latest: "{{ _query.tag_name }}"

        - name: Debug Kind release and tag
          ansible.builtin.debug:
            msg: "Using kind release '{{ _kind_release_tag }}', image 'kindest/node:{{ kind_image_tag }}'"

        - name: Download Kind executable
          ansible.builtin.get_url:
            url: "https://kind.sigs.k8s.io/dl/{{ _kind_release_tag }}/kind-{{ kind_release_family }}-{{ kind_release_architecture }}"
            dest: "{{ _kind_bin }}"
            mode: "u=rwx,og=rx"
          changed_when: false

    - name: Create Kind proxies
      when: kind_cluster_state != 'absent'
      block:
        - name: Create Kind docker network
          community.docker.docker_network:
            name: "{{ kind_network_name }}"
            ipam_config:
              - subnet: "{{ _supernet }}"
                gateway: "{{ _subnet | ansible.utils.ipaddr(1) | ansible.utils.ipaddr('address') }}"
                iprange: "{{ _subnet }}"
          vars:
            _supernet: "{{ kind_network_addr }}"
            _subnet: "{{ _supernet | ansible.utils.ipsubnet(24, 0) }}"

        - name: Deploy docker private registry
          community.docker.docker_container:
            auto_remove: true
            name: "{{ kind_registry_container }}"
            image: registry:2
            networks:
              - name: "{{ kind_network_name }}"
                aliases:
                  - "{{ kind_registry_hostname }}"
            published_ports: "{{ kind_registry_port }}:5000"
          when: kind_registry_deploy | bool
          changed_when: false

        - name: Deploy docker registry proxy
          community.docker.docker_container:
            auto_remove: true
            name: "{{ kind_proxy_container }}"
            image: registry:2
            networks:
              - name: "{{ kind_network_name }}"
                aliases:
                  - "{{ kind_proxy_hostname }}"
          when: kind_proxy_deploy | bool
          changed_when: false

    - name: Destroy Kind proxies
      when: kind_cluster_state == 'absent'
      block:
        - name: Destroy docker private registry
          community.docker.docker_container:
            state: absent
            name: "{{ kind_registry_container }}"
          when: kind_registry_cleanup | bool

        - name: Destroy docker registry proxy
          community.docker.docker_container:
            state: absent
            name: "{{ kind_proxy_container }}"
          when: kind_proxy_cleanup | bool

    - name: List Kind clusters
      ansible.builtin.command: >-
        {{ _kind_bin }} get clusters -q
      register: kind_cluster_query
      changed_when: false

    - name: Set cluster config file metadata
      ansible.builtin.set_fact:
        kind_config_path: "{{ kind_tmpdir.path }}/config.yaml"
        kind_config_content: |
          kind: Cluster

          apiVersion: kind.x-k8s.io/v1alpha4

          {% if (kind_nodes > 1) -%}
          nodes:
            - role: control-plane
            {% for i in range(1, kind_nodes) -%}
            - role: worker
            {% endfor -%}
          {%- endif -%}
          {%- if ((kind_registry_deploy | bool) or (kind_proxy_deploy | bool)) %}

          containerdConfigPatches:
          - |-
          {% endif -%}
          {%- if (kind_registry_deploy | bool) %}
            [plugins."io.containerd.grpc.v1.cri".registry.mirrors."{{ kind_registry_hostname }}:{{ kind_registry_port }}"]
              endpoint = ["http://{{ kind_registry_hostname }}:5000"]
          {% endif -%}
          {%- if (kind_proxy_deploy | bool) %}
            [plugins."io.containerd.grpc.v1.cri".registry.mirrors."docker.io"]
              endpoint = ["http://{{ kind_proxy_hostname }}:5000"]
          {% endif -%}

    - name: Create cluster configuration file
      ansible.builtin.copy:
        dest: "{{ kind_config_path }}"
        content: "{{ kind_config_content }}"
        mode: "u=rw,g=r,o="
      changed_when: false

    - name: Deploy Kind cluster
      ansible.builtin.shell: >-
        {{ _kind_bin }} create cluster {{ args_name }} {{ args_kubeconfig }} {{ args_image_option }} {{ args_config }}
      vars:
        args_name: "--name {{ kind_cluster_name }}"
        args_kubeconfig: "--kubeconfig {{ kind_kubeconfig }}"
        args_image: "--image kindest/node:{{ kind_image_tag }}"
        args_image_option: "{{ args_image if kind_image_tag != 'latest' else '' }}"
        args_config: "--config {{ kind_config_path }}"
      when:
        - kind_cluster_state != 'absent'
        - kind_cluster_name not in kind_cluster_query.stdout_lines
      changed_when: false

    - name: Destroy Kind cluster
      ansible.builtin.shell: >-
        {{ _kind_bin }} delete cluster --name {{ kind_cluster_name }}
      when:
        - kind_cluster_state == 'absent'
        - kind_cluster_name in kind_cluster_query.stdout_lines
      changed_when: false

- name: Destroy tempdir
  ansible.builtin.file:
    state: absent
    path: "{{ kind_tmpdir.path }}"
  changed_when: false
